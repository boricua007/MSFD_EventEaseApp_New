@using MSFD_EventEaseApp.Models
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations

<div class="registration-form-container">
    <div class="form-header mb-4">
        <div class="d-flex align-items-center justify-content-between">
            <div>
                <h2 class="mb-1">
                    <i class="bi bi-person-plus-fill me-2"></i>Event Registration
                </h2>
                @if (Event != null)
                {
                    <p class="text-white mb-0">Registering for: <strong>@Event.Name</strong></p>
                }
            </div>
            @if (Event != null)
            {
                <div class="text-end">
                    <span class="badge bg-light text-primary fs-6">@Event.Category</span>
                </div>
            }
        </div>
    </div>
    
    <EditForm Model="@Registration" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
        <DataAnnotationsValidator />
        
        @if (!string.IsNullOrEmpty(submitMessage))
        {
            <div class="alert @(isSubmitSuccess ? "alert-success" : "alert-danger") alert-dismissible fade show mb-4" role="alert">
                <i class="bi @(isSubmitSuccess ? "bi-check-circle-fill" : "bi-exclamation-triangle-fill") me-2"></i>
                @submitMessage
                <button type="button" class="btn-close" @onclick="ClearSubmitMessage"></button>
            </div>
        }

        <!-- Main Form Content -->
        <div class="row">
            <!-- Left Column -->
            <div class="col-lg-6">
                <!-- Personal & Contact Information -->
                <div class="form-card">
                    <h5 class="card-title">
                        <i class="bi bi-person me-2"></i>Personal & Contact Information
                    </h5>
                    
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="mb-3">
                                <label for="firstName" class="form-label">First Name <span class="text-danger">*</span></label>
                                <InputText id="firstName" class="@($"form-control {GetValidationClass(nameof(Registration.FirstName))}")" 
                                          @bind-Value="Registration.FirstName" placeholder="First name" />
                                <ValidationMessage For="@(() => Registration.FirstName)" class="form-text text-danger" />
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="mb-3">
                                <label for="lastName" class="form-label">Last Name <span class="text-danger">*</span></label>
                                <InputText id="lastName" class="@($"form-control {GetValidationClass(nameof(Registration.LastName))}")" 
                                          @bind-Value="Registration.LastName" placeholder="Last name" />
                                <ValidationMessage For="@(() => Registration.LastName)" class="form-text text-danger" />
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="mb-3">
                                <label for="email" class="form-label">Email <span class="text-danger">*</span></label>
                                <InputText id="email" type="email" class="@($"form-control {GetValidationClass(nameof(Registration.Email))}")" 
                                          @bind-Value="Registration.Email" placeholder="email@example.com" />
                                <ValidationMessage For="@(() => Registration.Email)" class="form-text text-danger" />
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="mb-3">
                                <label for="phoneNumber" class="form-label">Phone <span class="text-danger">*</span></label>
                                <InputText id="phoneNumber" type="tel" class="@($"form-control {GetValidationClass(nameof(Registration.PhoneNumber))}")" 
                                          @bind-Value="Registration.PhoneNumber" placeholder="(555) 123-4567" />
                                <ValidationMessage For="@(() => Registration.PhoneNumber)" class="form-text text-danger" />
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Professional Information -->
                <div class="form-card">
                    <h5 class="card-title">
                        <i class="bi bi-building me-2"></i>Professional Information
                    </h5>
                    
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="mb-3">
                                <label for="company" class="form-label">Company</label>
                                <InputText id="company" class="form-control" @bind-Value="Registration.Company" 
                                          placeholder="Company name" />
                                <ValidationMessage For="@(() => Registration.Company)" class="form-text text-danger" />
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="mb-3">
                                <label for="jobTitle" class="form-label">Job Title</label>
                                <InputText id="jobTitle" class="form-control" @bind-Value="Registration.JobTitle" 
                                          placeholder="Job title" />
                                <ValidationMessage For="@(() => Registration.JobTitle)" class="form-text text-danger" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Right Column -->
            <div class="col-lg-6">
                <!-- Event Details -->
                <div class="form-card">
                    <h5 class="card-title">
                        <i class="bi bi-calendar-event me-2"></i>Event Details
                    </h5>
                    
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="mb-3">
                                <label for="numberOfAttendees" class="form-label">Attendees <span class="text-danger">*</span></label>
                                <InputNumber id="numberOfAttendees" class="@($"form-control {GetValidationClass(nameof(Registration.NumberOfAttendees))}")" 
                                           @bind-Value="Registration.NumberOfAttendees" @bind-Value:after="UpdateTotalCost" min="1" max="10" />
                                <ValidationMessage For="@(() => Registration.NumberOfAttendees)" class="form-text text-danger" />
                                <small class="form-text text-muted">Max 10 per registration</small>
                            </div>
                        </div>
                        <div class="col-sm-6">
                            @if (Event != null)
                            {
                                <div class="mb-3">
                                    <label class="form-label">Total Cost</label>
                                    <div class="input-group">
                                        <span class="input-group-text">$</span>
                                        <input type="text" class="form-control bg-light fw-bold" value="@totalCost.ToString("F2")" readonly />
                                    </div>
                                    <small class="form-text text-muted">
                                        @Registration.NumberOfAttendees Ã— $@Event.Price.ToString("F2")
                                    </small>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <!-- Special Requirements -->
                <div class="form-card">
                    <h5 class="card-title">
                        <i class="bi bi-gear me-2"></i>Additional Information
                    </h5>
                    
                    <div class="mb-3">
                        <label for="specialRequirements" class="form-label">Special Requirements</label>
                        <InputTextArea id="specialRequirements" class="form-control" rows="2" 
                                      @bind-Value="Registration.SpecialRequirements" 
                                      placeholder="Dietary restrictions, accessibility needs..." />
                        <ValidationMessage For="@(() => Registration.SpecialRequirements)" class="form-text text-danger" />
                    </div>
                    
                    <div class="mb-3">
                        <label for="comments" class="form-label">Comments</label>
                        <InputTextArea id="comments" class="form-control" rows="2" 
                                      @bind-Value="Registration.Comments" 
                                      placeholder="Additional information..." />
                        <ValidationMessage For="@(() => Registration.Comments)" class="form-text text-danger" />
                    </div>
                </div>
            </div>
        </div>

        <!-- Terms & Actions -->
        <div class="form-card">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <div class="mb-3 mb-md-0">
                        <div class="form-check mb-2">
                            <InputCheckbox id="agreeToTerms" class="@($"form-check-input {GetValidationClass(nameof(Registration.AgreeToTerms))}")" 
                                          @bind-Value="Registration.AgreeToTerms" />
                            <label for="agreeToTerms" class="form-check-label">
                                I agree to the <a href="#" @onclick:preventDefault="true" class="text-primary">terms and conditions</a> <span class="text-danger">*</span>
                            </label>
                        </div>
                        <div class="form-check">
                            <InputCheckbox id="subscribeToNewsletter" class="form-check-input" 
                                          @bind-Value="Registration.SubscribeToNewsletter" />
                            <label for="subscribeToNewsletter" class="form-check-label">
                                Subscribe to event notifications
                            </label>
                        </div>
                        <ValidationMessage For="@(() => Registration.AgreeToTerms)" class="form-text text-danger" />
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="d-flex gap-2 justify-content-md-end">
                        <button type="button" class="btn btn-outline-secondary" @onclick="HandleCancel" disabled="@isSubmitting">
                            <i class="bi bi-x-lg me-1"></i>Cancel
                        </button>
                        <button type="submit" class="btn btn-primary btn-lg" disabled="@isSubmitting">
                            @if (isSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                <span>Submitting...</span>
                            }
                            else
                            {
                                <i class="bi bi-check-lg me-1"></i>
                                <span>Register</span>
                            }
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
</div>

<style>
    .registration-form-container {
        width: 100%;
    }
    
    .form-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 2rem;
        border-radius: 10px;
        margin-bottom: 2rem;
    }
    
    .form-card {
        background: #ffffff;
        border: 1px solid #e9ecef;
        border-radius: 10px;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: box-shadow 0.2s ease;
    }
    
    .form-card:hover {
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }
    
    .card-title {
        color: #495057;
        font-weight: 600;
        margin-bottom: 1rem;
        padding-bottom: 0.75rem;
        border-bottom: 2px solid #e9ecef;
        display: flex;
        align-items: center;
    }
    
    .form-control, .form-select {
        border-radius: 6px;
        transition: all 0.2s ease;
    }
    
    .form-control:focus, .form-select:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
    }
    
    .form-control.is-valid {
        border-color: #198754;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23198754' d='m2.3 6.73.82-.12-.8-2.31 2.81-3.4-.8-.65-2.47 3.5-.45-1.27-.84.12 1.73 2.33z'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right calc(0.375em + 0.1875rem) center;
        background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
    }
    
    .form-control.is-invalid {
        border-color: #dc3545;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath d='m5.8 4.6 2.4 2.4'/%3e%3cpath d='m8.2 4.6-2.4 2.4'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right calc(0.375em + 0.1875rem) center;
        background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
    }
    
    .form-check-input.is-invalid {
        border-color: #dc3545;
    }
    
    .text-danger {
        font-size: 0.875em;
    }
    
    .input-group-text {
        font-weight: 600;
        background-color: #f8f9fa;
        border-color: #e9ecef;
    }
    
    .bg-light {
        background-color: #f8f9fa !important;
        border-color: #e9ecef !important;
    }
    
    .btn {
        border-radius: 6px;
        font-weight: 500;
    }
    
    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
    }
    
    .btn-primary:hover {
        background: linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%);
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
    }
    
    @@media (max-width: 768px) {
        .form-header {
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }
        
        .form-card {
            padding: 1rem;
            margin-bottom: 1rem;
        }
        
        .d-flex.gap-2 {
            flex-direction: column;
        }
        
        .btn {
            width: 100%;
        }
        
        .card-title {
            font-size: 1rem;
        }
    }
</style>

@code {
    [Parameter] public Registration Registration { get; set; } = new();
    [Parameter] public Event? Event { get; set; }
    [Parameter] public EventCallback<Registration> OnRegistrationSubmit { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private EditContext? editContext;
    private ValidationMessageStore? messageStore;
    private bool isSubmitting = false;
    private string submitMessage = string.Empty;
    private bool isSubmitSuccess = false;
    private decimal totalCost = 0;

    protected override void OnInitialized()
    {
        editContext = new EditContext(Registration);
        messageStore = new ValidationMessageStore(editContext);
        
        // Set the event ID if Event is provided
        if (Event != null)
        {
            Registration.EventId = Event.EventId;
            UpdateTotalCost();
        }
    }

    protected override void OnParametersSet()
    {
        // Update total cost when parameters change
        UpdateTotalCost();
    }

    private void UpdateTotalCost()
    {
        totalCost = Registration.NumberOfAttendees * (Event?.Price ?? 0);
        StateHasChanged();
    }

    private string GetValidationClass(string fieldName)
    {
        if (editContext == null) return string.Empty;
        
        var fieldIdentifier = new FieldIdentifier(Registration, fieldName);
        var isModified = editContext.IsModified(fieldIdentifier);
        
        if (!isModified) return string.Empty;
        
        var isValid = !editContext.GetValidationMessages(fieldIdentifier).Any();
        return isValid ? "is-valid" : "is-invalid";
    }

    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        submitMessage = string.Empty;
        StateHasChanged();
        
        try
        {
            // Simulate processing delay
            await Task.Delay(1000);
            
            // Set registration date and initial status
            Registration.RegistrationDate = DateTime.Now;
            Registration.Status = RegistrationStatus.Pending;
            
            // Invoke the callback
            await OnRegistrationSubmit.InvokeAsync(Registration);
            
            submitMessage = "Registration submitted successfully! You will receive a confirmation email shortly.";
            isSubmitSuccess = true;
        }
        catch (Exception ex)
        {
            submitMessage = $"An error occurred while submitting your registration: {ex.Message}";
            isSubmitSuccess = false;
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private async Task HandleInvalidSubmit()
    {
        submitMessage = "Please correct the errors below and try again.";
        isSubmitSuccess = false;
        await Task.CompletedTask;
    }

    private async Task HandleCancel()
    {
        await OnCancel.InvokeAsync();
    }

    private void ClearSubmitMessage()
    {
        submitMessage = string.Empty;
        StateHasChanged();
    }
}