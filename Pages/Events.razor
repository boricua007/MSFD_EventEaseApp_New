@page "/events"
@using MSFD_EventEaseApp.Models
@using MSFD_EventEaseApp.Services
@using MSFD_EventEaseApp.Components
@inject EventService EventService
@inject NavigationManager Navigation

<PageTitle>Browse Events - EventEase</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="display-4 text-center mb-4">Browse Events</h1>
            <p class="lead text-center mb-5">Discover amazing events tailored for your interests</p>
        </div>
    </div>

    <!-- Event Search Component -->
    <div class="row">
        <div class="col-12">
            <EventSearch Categories="@categories" 
                        OnSearch="HandleSearch" 
                        OnClearFilters="HandleClearFilters" />
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading events...</span>
            </div>
            <p class="mt-2">Loading events...</p>
        </div>
    }
    else if (events != null && events.Count > 0)
    {
        <div class="row">
            @foreach (var eventItem in events)
            {
                <div class="col-lg-4 col-md-6 mb-4">
                    <EventCard Event="eventItem" OnViewDetails="HandleViewDetails" />
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <h3 class="text-muted">No Events Found</h3>
            <p class="text-muted">Check back later for new events.</p>
        </div>
    }
</div>

@code {
    private List<Event>? events;
    private List<string>? categories;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await LoadEvents();
        LoadCategories();
        isLoading = false;
    }

    private async Task LoadEvents()
    {
        events = await EventService.GetAllEventsAsync();
    }

    private void LoadCategories()
    {
        categories = EventService.GetAllCategories();
    }

    private async Task HandleSearch(SearchCriteria criteria)
    {
        isLoading = true;
        StateHasChanged();

        events = await EventService.SearchEventsAsync(
            eventName: criteria.EventName,
            location: criteria.Location,
            category: criteria.Category,
            date: criteria.Date
        );

        isLoading = false;
        StateHasChanged();
    }

    private async Task HandleClearFilters()
    {
        isLoading = true;
        StateHasChanged();
        
        await LoadEvents();
        
        isLoading = false;
        StateHasChanged();
    }

    private void HandleViewDetails(int eventId)
    {
        Navigation.NavigateTo($"/event/{eventId}");
    }
}